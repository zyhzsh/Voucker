name: Order Service Build , Test , Deploy
on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

# env:
#   PROJECT_ID: ${{ secrets.GKE_PROJECT }}
#   GKE_CLUSTER: autopilot-cluster-voucker-platform
#   GKE_ZONE: europe-west1
#   DEPLOYMENT_NAME: order-service-api
#   IMAGE: order-service
env:
  # Rabbmit MQ For Linux 
  RABBIT_MQ_URI: amqp://172.17.0.1:5672

  # Rabbmit MQ Services
  RABBIT_MQ_ORDER_QUEUE: ORDER

  RABBIT_MQ_INVENTORY_QUEUE: INVENTORY
  
  # Listening port
  PORT: 3000

  # Auth
  AUTH0_AUDIENCE: voucker-nestjs-api
  AUTH0_DOMAIN: https://dev-gl5r1aa7.eu.auth0.com/

  # PosgreSql Database varialble
  DATABASE_USER: root
  DATABASE_PASSWORD: root
  DATABASE_NAME: order_db
  DATABASE_PORT: 5432
  # For Mac 
  # DATABASE_HOST=host.docker.internal
  # For Linux
  DATABASE_HOST: 172.17.0.1

jobs:
  Build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: './BE'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: './BE/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Build Testing
        run: npm run build order --if-present
  Test:
    needs: [Build]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: './BE'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: './BE/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Unit, Intergation Test
        run: npm run test .

      - name: Run Docker Compose
        run: docker compose -f docker-compose.test.yml up -d --build

      - name: E2E Test
        run: npm run test:e2e-order

  Publishing-Deploy:
    needs: [Build, Test]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: './BE'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER_NAME  }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build/Push image
        uses: docker/build-push-action@v3
        with:
          context: './BE'
          file: './BE/apps/order/Dockerfile'
          target: production
          push: true
          tags: vouckerplatform/order-service:${{github.sha}}
#####################################
# Publishing-Deploy:
#   needs: [Build, Test]
#   runs-on: ubuntu-latest
#   defaults:
#     run:
#       working-directory: './BE'

#   steps:
#     - name: Checkout Repository
#       uses: actions/checkout@v3

#     - name: Setup Google Cloud CLI
#       uses: google-github-actions/setup-gcloud@v0.2.0
#       with:
#         service_account_key: ${{ secrets.GKE_SA_KEY }}
#         project_id: ${{ secrets.GKE_PROJECT }}

#     - name: Configure Docker
#       run: |-
#         gcloud --quiet auth configure-docker

#     - name: Setup GKE Credentials
#       uses: google-github-actions/get-gke-credentials@v0.2.1
#       with:
#         cluster_name: ${{ env.GKE_CLUSTER }}
#         location: ${{ env.GKE_ZONE }}
#         credentials: ${{ secrets.GKE_SA_KEY }}

#     - name: Build Docker Image
#       run: |-
#         docker build \
#          --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
#          --build-arg GITHUB_SHA="$GITHUB_SHA" \
#          --build-arg GITHUB_REF="$GITHUB_REF" \
#          -f ./apps/order/Dockerfile .

#     - name: Publish to Google Registry
#       run: |-
#         docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"

#     # Set up kustomize
#     - name: Set up Kustomize
#       run: |-
#         curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
#         chmod u+x ./kustomize

#     # Deploy the Docker image to the GKE cluster
#     - name: Deploy
#       run: |-
#         cd ..
#         cd k8s
#         cd order
#         kustomize edit set image $IMAGE=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
#         kustomize build . | kubectl apply -f -
#         kubectl rollout status deployment/$DEPLOYMENT_NAME
#         kubectl get services -o wide
